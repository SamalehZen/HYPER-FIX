#!/usr/bin/env python3
"""
Script de v√©rification de la configuration avant Supabase
V√©rifie que tous les fichiers n√©cessaires sont pr√©sents
"""

import os

def check_configuration():
    """V√©rifier que tous les √©l√©ments sont pr√©sents pour Supabase"""
    
    print("üîç V√©rification de la configuration L'HyperFix")
    print("=" * 50)
    
    # V√©rifier les fichiers essentiels
    essential_files = [
        "database/schema.sql",
        "scripts/cyrus_insert_v3.sql",
        "scripts/test_supabase.py",
        ".env",
        "src/lib/supabase.ts",
        "src/lib/database.ts"
    ]
    
    all_good = True
    
    for file in essential_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - MANQUANT")
            all_good = False
    
    print("\nüìä Statistiques des donn√©es:")
    
    # V√©rifier la taille du script CYRUS
    cyrus_file = "scripts/cyrus_insert_v3.sql"
    if os.path.exists(cyrus_file):
        size = os.path.getsize(cyrus_file)
        print(f"   - Structure CYRUS: {size:,} bytes (~2294 √©l√©ments)")
    
    # V√©rifier la structure SQL
    schema_file = "database/schema.sql"
    if os.path.exists(schema_file):
        with open(schema_file, 'r') as f:
            content = f.read()
            tables = content.count("CREATE TABLE")
            print(f"   - Sch√©ma SQL: {tables} tables d√©finies")
    
    print("\nüîß Configuration TypeScript:")
    
    # V√©rifier les types
    supabase_file = "src/lib/supabase.ts"
    if os.path.exists(supabase_file):
        with open(supabase_file, 'r') as f:
            content = f.read()
            interfaces = content.count("interface")
            print(f"   - Types TypeScript: {interfaces} interfaces d√©finies")
    
    # V√©rifier les utilitaires
    database_file = "src/lib/database.ts"
    if os.path.exists(database_file):
        with open(database_file, 'r') as f:
            content = f.read()
            functions = content.count("export async function")
            print(f"   - Fonctions utilitaires: {functions} fonctions de base de donn√©es")
    
    print("\nüìù Fichier .env:")
    
    # V√©rifier le .env
    env_file = ".env"
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            content = f.read()
            if "votre-projet.supabase.co" in content:
                print("   ‚ö†Ô∏è  Les cl√©s Supabase ne sont pas encore configur√©es")
                print("   ‚û°Ô∏è  Suivez le GUIDE_CONFIGURATION_SUPABASE.md")
            else:
                print("   ‚úÖ Configuration personnalis√©e d√©tect√©e")
    
    print("\n" + "=" * 50)
    
    if all_good:
        print("üéâ Configuration pr√™te !")
        print("üìñ √âtapes suivantes :")
        print("   1. Cr√©er votre projet Supabase sur https://supabase.com")
        print("   2. Modifier le fichier .env avec vos vraies cl√©s")
        print("   3. Ex√©cuter: python scripts/test_supabase.py")
        print("   4. D√©marrer: bun dev")
    else:
        print("‚ùå Configuration incompl√®te")
        print("   Certains fichiers essentiels sont manquants")
    
    return all_good

if __name__ == "__main__":
    check_configuration()