#!/usr/bin/env python3
"""
Script simplifi√© pour importer les donn√©es CYRUS via l'API Supabase
Parse le fichier SQL et fait les insertions via l'API Python
"""

import os
import re
import json
from supabase import create_client, Client
from dotenv import load_dotenv

def parse_sql_inserts(sql_content):
    """Parser les INSERT statements du fichier SQL"""
    
    # Pattern pour matcher les INSERT INTO statements
    insert_pattern = r"INSERT INTO cyrus_structure \(([^)]+)\) VALUES\s*(.*?)(?=INSERT INTO|$)"
    
    matches = re.findall(insert_pattern, sql_content, re.DOTALL)
    
    records = []
    
    for match in matches:
        columns = [col.strip() for col in match[0].split(',')]
        values_section = match[1].strip()
        
        # Extraire chaque ligne de VALUES
        value_lines = re.findall(r'\(([^)]+)\)', values_section)
        
        for value_line in value_lines:
            values = [val.strip().strip("'") for val in value_line.split(',')]
            
            # Cr√©er un dictionnaire pour chaque record
            record = {}
            for i, col in enumerate(columns):
                if i < len(values):
                    value = values[i]
                    # Convertir les types
                    if value == 'NULL':
                        record[col] = None
                    elif value.isdigit():
                        record[col] = int(value)
                    else:
                        record[col] = value
            
            records.append(record)
    
    return records

def import_cyrus_simple():
    """Import CYRUS de mani√®re simple via l'API"""
    
    # Charger les variables d'environnement
    load_dotenv()
    
    url = os.getenv("SUPABASE_URL")
    service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
    
    if not url or not service_key:
        print("‚ùå Variables d'environnement manquantes:")
        print("   - SUPABASE_URL")
        print("   - SUPABASE_SERVICE_ROLE_KEY")
        return False
    
    print(f"üöÄ Import CYRUS simplifi√© dans Supabase")
    print(f"üîó Connexion √†: {url}")
    print("=" * 50)
    
    try:
        # Connexion avec service_role_key
        supabase = create_client(url, service_key)
        
        # V√©rifier la connexion
        try:
            test = supabase.table('cyrus_structure').select('count').limit(1).execute()
            print("‚úÖ Connexion Supabase OK")
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
        
        # Lire et parser le fichier SQL
        sql_file = "scripts/cyrus_insert_v3.sql"
        if not os.path.exists(sql_file):
            print(f"‚ùå Fichier {sql_file} introuvable")
            return False
        
        print(f"üìÅ Lecture du fichier {sql_file}...")
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        print("‚öôÔ∏è  Parsing des donn√©es SQL...")
        records = parse_sql_inserts(sql_content)
        
        if not records:
            print("‚ùå Aucune donn√©e pars√©e du fichier SQL")
            return False
        
        print(f"üìä {len(records)} enregistrements √† importer")
        
        # Import par batch pour √©viter les timeouts
        batch_size = 100
        total_inserted = 0
        
        for i in range(0, len(records), batch_size):
            batch = records[i:i+batch_size]
            
            print(f"üì• Import batch {i//batch_size + 1}/{(len(records)-1)//batch_size + 1} ({len(batch)} √©l√©ments)...")
            
            try:
                result = supabase.table('cyrus_structure').insert(batch).execute()
                if result.data:
                    total_inserted += len(result.data)
                    print(f"   ‚úÖ {len(result.data)} √©l√©ments ins√©r√©s")
                else:
                    print(f"   ‚ö†Ô∏è  Batch trait√© (pas de donn√©es retourn√©es)")
                    total_inserted += len(batch)
                    
            except Exception as e:
                print(f"   ‚ùå Erreur sur ce batch: {e}")
                continue
        
        print(f"\nüéâ Import termin√© !")
        print(f"‚úÖ {total_inserted} √©l√©ments trait√©s")
        
        # V√©rification finale
        final_count = supabase.table('cyrus_structure').select('count').execute()
        if hasattr(final_count, 'count') and final_count.count:
            print(f"üîç V√©rification: {final_count.count} √©l√©ments en base")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False

if __name__ == "__main__":
    success = import_cyrus_simple()
    
    if success:
        print("\nüöÄ Prochain √©tape: Tester la connexion compl√®te")
        print("   python scripts/test_supabase.py")
    else:
        print("\nüí° Alternative: Utiliser l'interface web Supabase")
        print("   - Aller dans SQL Editor")
        print("   - Copier/coller scripts/cyrus_insert_v3.sql")